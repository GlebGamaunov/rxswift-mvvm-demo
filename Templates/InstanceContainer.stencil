import Swinject
import Moya
import Data
import Domain

/// Provides new instances
final class InstanceContainer {

    private init() {}

    static let instance: Container = {
        let container = Container(parent: AppContainer.instance, defaultObjectScope: .transient)

        {% for item in types.protocols where item|annotated:"injectable" and not item|annotated:"singleton" %}
        // MARK: {{ item.name }}
        container.register({{ item.name }}.self) { resolver in
            {% if item.annotations.injectable != 1 %}
            let instance = {{ item.annotations.injectable }}()
            {% for var in type[item.annotations.injectable].allVariables where var.type|annotated:"injectable" or var|annotated:"inject" %}
            instance.{{ var.name }} = resolver.resolve({% if var.annotations.inject and var.annotations.inject != 1 %}{{ var.annotations.inject }}{% else %}{{ var.unwrappedTypeName }}{% endif %}.self)!
            {% endfor %}

            return instance
            {% else %}
            {% for impl in types.implementing[item.name] %}
            {% if impl.initializers.count == 0 %}
            let instance = {{ impl.name }}()
            {% else %}
            {% for initializer in impl.initializers %}
            let instance = {{ impl.name }}(
            {% for parameter in initializer.parameters %}
                {% if parameter.type|annotated:"injectable" or parameter|annotated:"inject" %}
                {{ parameter.name }}: resolver.resolve({% if parameter.annotations.inject and parameter.annotations.inject != 1 %}{{ parameter.annotations.inject }}{% else %}{{ parameter.unwrappedTypeName }}{% endif %}.self)!{% if not forloop.last%}, {% endif %}
                {% else %}
                #error("Cannot inject non-injectable dependency '{{ parameter.name }}' of type '{{ parameter.unwrappedTypeName }}'")
                {% endif %}
            {% endfor %}
            )
            {% endfor %}
            {% endif %}
            {% for var in impl.allVariables where var|annotated:"inject" %}
            {% if var.type|annotated:"injectable" %}
            instance.{{ var.name }} = resolver.resolve({% if var.annotations.inject and var.annotations.inject != 1 %}{{ var.annotations.inject }}{% else %}{{ var.unwrappedTypeName }}{% endif %}.self)!
            {% else %}
            #error("Cannot inject non-injectable dependency '{{ var.name }}' of type '{{ var.unwrappedTypeName }}'")
            {% endif %}
            {% endfor %}
            return instance
            {% endfor %}
            {% endif %}
        }

        {% endfor %}
        {% for item in types.classes where item|annotated:"injectable" and not item|annotated:"singleton" %}
        // MARK: {{ item.name }}
        container.register({{ item.name }}.self) { resolver in
            {% if item.initializers.count == 0 %}
            let instance = {{ item.name }}()
            {% else %}
            {% for initializer in item.initializers %}
            let instance = {{ item.name }}(
            {% for parameter in initializer.parameters %}
                {% if parameter.type|annotated:"injectable" or parameter|annotated:"inject!" %}
                {{ parameter.name }}: resolver.resolve({% if parameter.annotations.inject and parameter.annotations.inject != 1 %}{{ parameter.annotations.inject }}{% else %}{{ parameter.unwrappedTypeName }}{% endif %}.self)!{% if not forloop.last%}, {% endif %}
                {% else %}
                #error("Cannot inject non-injectable dependency '{{ parameter.name }}' of type '{{ parameter.unwrappedTypeName }}'")
                {% endif %}
            {% endfor %}
            )
            {% endfor %}
            {% endif %}
            {% for var in item.allVariables where var|annotated:"inject" %}
            {% if var.type|annotated:"injectable" %}
            instance.{{ var.name }} = resolver.resolve({% if var.annotations.inject and var.annotations.inject != 1 %}{{ var.annotations.inject }}{% else %}{{ var.unwrappedTypeName }}{% endif %}.self)!
            {% else %}
            #error("Cannot inject non-injectable dependency '{{ var.name }}' of type '{{ var.unwrappedTypeName }}'")
            {% endif %}
            {% endfor %}
            return instance
        }

        {% endfor %}
        return container
    }()
}
